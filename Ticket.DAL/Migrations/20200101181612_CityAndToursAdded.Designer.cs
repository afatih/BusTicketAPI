// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticket.DAL;

namespace Ticket.DAL.Migrations
{
    [DbContext(typeof(TicketDBContext))]
    [Migration("20200101181612_CityAndToursAdded")]
    partial class CityAndToursAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ticket.Entity.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("RowNumber");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = 1, Name = "İstanbul", RowNumber = 1 },
                        new { Id = 2, Name = "Ankara", RowNumber = 2 },
                        new { Id = 3, Name = "İzmir", RowNumber = 3 }
                    );
                });

            modelBuilder.Entity("Ticket.Entity.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("From");

                    b.Property<int>("Price");

                    b.Property<string>("Time");

                    b.Property<string>("To");

                    b.Property<int>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("Tours");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2020, 1, 1, 21, 16, 12, 32, DateTimeKind.Local), From = "İstanbul", Price = 50, Time = "16:00", To = "Ankara", UserCount = 30 },
                        new { Id = 2, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 50, Time = "17:00", To = "Ankara", UserCount = 44 },
                        new { Id = 3, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 50, Time = "18:00", To = "Ankara", UserCount = 20 },
                        new { Id = 4, Date = new DateTime(2020, 1, 2, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 50, Time = "16:00", To = "Ankara", UserCount = 20 },
                        new { Id = 5, Date = new DateTime(2020, 1, 2, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 50, Time = "18:00", To = "Ankara", UserCount = 20 },
                        new { Id = 6, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 30, Time = "16:00", To = "İzmir", UserCount = 30 },
                        new { Id = 7, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 30, Time = "17:00", To = "İzmir", UserCount = 44 },
                        new { Id = 8, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İstanbul", Price = 30, Time = "18:00", To = "İzmir", UserCount = 1 },
                        new { Id = 9, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İzmir", Price = 20, Time = "16:00", To = "Ankara", UserCount = 30 },
                        new { Id = 10, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İzmir", Price = 20, Time = "16:00", To = "Ankara", UserCount = 44 },
                        new { Id = 11, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İzmir", Price = 20, Time = "16:00", To = "Ankara", UserCount = 1 },
                        new { Id = 12, Date = new DateTime(2020, 1, 1, 21, 16, 12, 33, DateTimeKind.Local), From = "İzmir", Price = 20, Time = "16:00", To = "Ankara", UserCount = 5 }
                    );
                });

            modelBuilder.Entity("Ticket.Entity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Email = "test1@gmail.com", IsActive = true, Name = "test1", Password = "test", Surname = "testSoyad" },
                        new { Id = 2, Email = "test2@gmail.com", IsActive = true, Name = "test2", Password = "test", Surname = "testSoyad" },
                        new { Id = 3, Email = "test3@gmail.com", IsActive = true, Name = "test3", Password = "test", Surname = "testSoyad" }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
